import Head from "next/head";
import { useRouter } from "next/router";
import { useEffect } from "react";
import ReactFlow, {
  Background,
  BackgroundVariant,
  Controls,
  Handle,
  MiniMap,
  Position,
  useEdgesState,
  useNodesState,
} from "reactflow";
import { api } from "~/utils/api";
import React, { memo } from "react";
import "reactflow/dist/style.css";
import { GetServerSidePropsContext, InferGetServerSidePropsType } from "next";
import { prisma } from "~/server/db";

interface CustomNodeProps {
  data: {
    icon: string;
  };
}
function CustomNode({ data }: CustomNodeProps) {
  return (
    <div className=" rounded-m flex h-6 w-6 items-center justify-center rounded-lg border-2 border-rose-300">
      <img src={data.icon} alt="" />
      <Handle
        type="source"
        id="right"
        position={Position.Right}
        isConnectable={false}
      />
      <Handle
        type="source"
        id="top"
        position={Position.Top}
        isConnectable={false}
      />
      <Handle
        type="source"
        id="left"
        position={Position.Left}
        isConnectable={false}
      />
      <Handle
        type="source"
        id="bottom"
        position={Position.Bottom}
        isConnectable={false}
      />

      <Handle
        type="target"
        id="tLeft"
        position={Position.Left}
        isConnectable={false}
      />
      <Handle
        type="target"
        id="tTop"
        position={Position.Top}
        isConnectable={false}
      />
      <Handle
        type="target"
        id="tRight"
        position={Position.Right}
        isConnectable={false}
      />
      <Handle
        type="target"
        id="tBottom"
        position={Position.Bottom}
        isConnectable={false}
      />
    </div>
  );
}

const nodeTypes = { c: memo(CustomNode) };

function Tree({ skills, edges }) {
  const [flowNodes, setFlowNodes, onNodesChange] = useNodesState([]);
  const [flowEdges, setFlowEdges, onEdgesChange] = useEdgesState([]);

  useEffect(() => {
    const newNodes = [];
    const newEdges = [];
    skills?.forEach((s) => {
      newNodes.push({
        id: s.id,
        type: "c",
        data: {
          title: s.title,
          icon: s.icon,
        },
        position: {
          x: s.metaData?.position?.x || 0,
          y: s.metaData?.position?.y || 0,
        },
      });
    });
    if (newNodes.length) {
      setFlowNodes(newNodes);
      edges?.forEach((e) => {
        newEdges.push({
          id: e.id,
          target: e.childId,
          source: e.parentId,
          type: "straight",
          ...e.metaData,
        });
      });
      setFlowEdges(newEdges);
      console.log("eff");
    }
  }, [skills, edges, setFlowNodes]);
  return (
    <ReactFlow
      className="bg-teal-50"
      fitView
      onNodesChange={onNodesChange}
      onEdgesChange={onEdgesChange}
      nodeTypes={nodeTypes}
      nodes={flowNodes}
      edges={flowEdges}
    ></ReactFlow>
  );
}
export async function getServerSideProps(
  context: GetServerSidePropsContext<{ slug: string }>
) {
  const slug = context.params?.slug as string;

  const tree = await prisma.skillTree.findFirst({ where: { slug } });
  const skills = await prisma.skill.findMany({ where: { tree: { slug } } });
  const edges = await prisma.skillEdge.findMany({
    where: { tree: { slug } },
  });

  return {
    props: {
      tree,
      skills,
      edges,
    },
  };
}
export default function Home(
  props: InferGetServerSidePropsType<typeof getServerSideProps>
) {
  const { query } = useRouter();
  const { slug } = query as { slug: string };
  // const tree = api.tree.getBySlug.useQuery({ slug }, { enabled: !!slug });
  // const skills = api.skill.getByTree.useQuery({ slug }, { enabled: !!slug });
  // const edges = api.edge.getByTree.useQuery({ slug }, { enabled: !!slug });

  const { tree, skills, edges } = props;

  console.log("req");

  return (
    <>
      <Head>
        <title>{tree?.title}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="h-screen w-screen">
        <Tree skills={skills} edges={edges}></Tree>
      </main>
    </>
  );
}
