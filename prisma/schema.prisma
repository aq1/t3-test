// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model SkillTree {
  id        String      @id @default(cuid())
  title     String      @unique
  slug      String      @unique
  skills    Skill[]
  SkillEdge SkillEdge[]
}

model Skill {
  id            String      @id @default(cuid())
  treeId        String
  title         String
  slug          String
  description   String
  metaData      Json
  tree          SkillTree   @relation(fields: [treeId], references: [id], onDelete: Cascade)
  icon          String      @default("")
  quests        Quest[]
  asParentEdges SkillEdge[] @relation(name: "parent")
  asChildEdges  SkillEdge[] @relation(name: "child")
}

model SkillEdge {
  id       String    @id @default(cuid())
  treeId   String
  parentId String
  childId  String
  metaData Json
  tree     SkillTree @relation(fields: [treeId], references: [id], onDelete: Cascade)
  parent   Skill     @relation(name: "parent", fields: [parentId], references: [id], onDelete: Cascade)
  child    Skill     @relation(name: "child", fields: [childId], references: [id], onDelete: Cascade)
}

model Quest {
  id              String  @id @default(cuid())
  skillId         String
  title           String
  slug            String
  description     String
  skill           Skill   @relation(fields: [skillId], references: [id], onDelete: Cascade)
  skillRelationId String?
}
